/*
Nordigen Account Information Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0 (v2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nordigen

import (
	"encoding/json"
	"fmt"
)

// Status1c5EnumUndergoingAuthentication the model 'Status1c5EnumUndergoingAuthentication'
type Status1c5EnumUndergoingAuthentication string

// List of Status1c5EnumUndergoingAuthentication
const (
	STATUS1C5ENUMUNDERGOINGAUTHENTICATION_UA Status1c5EnumUndergoingAuthentication = "UA"
	STATUS1C5ENUMUNDERGOINGAUTHENTICATION_UNDERGOING_AUTHENTICATION Status1c5EnumUndergoingAuthentication = "UNDERGOING_AUTHENTICATION"
)

// All allowed values of Status1c5EnumUndergoingAuthentication enum
var AllowedStatus1c5EnumUndergoingAuthenticationEnumValues = []Status1c5EnumUndergoingAuthentication{
	"UA",
	"UNDERGOING_AUTHENTICATION",
}

func (v *Status1c5EnumUndergoingAuthentication) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Status1c5EnumUndergoingAuthentication(value)
	for _, existing := range AllowedStatus1c5EnumUndergoingAuthenticationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Status1c5EnumUndergoingAuthentication", value)
}

// NewStatus1c5EnumUndergoingAuthenticationFromValue returns a pointer to a valid Status1c5EnumUndergoingAuthentication
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatus1c5EnumUndergoingAuthenticationFromValue(v string) (*Status1c5EnumUndergoingAuthentication, error) {
	ev := Status1c5EnumUndergoingAuthentication(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Status1c5EnumUndergoingAuthentication: valid values are %v", v, AllowedStatus1c5EnumUndergoingAuthenticationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Status1c5EnumUndergoingAuthentication) IsValid() bool {
	for _, existing := range AllowedStatus1c5EnumUndergoingAuthenticationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Status1c5EnumUndergoingAuthentication value
func (v Status1c5EnumUndergoingAuthentication) Ptr() *Status1c5EnumUndergoingAuthentication {
	return &v
}

type NullableStatus1c5EnumUndergoingAuthentication struct {
	value *Status1c5EnumUndergoingAuthentication
	isSet bool
}

func (v NullableStatus1c5EnumUndergoingAuthentication) Get() *Status1c5EnumUndergoingAuthentication {
	return v.value
}

func (v *NullableStatus1c5EnumUndergoingAuthentication) Set(val *Status1c5EnumUndergoingAuthentication) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus1c5EnumUndergoingAuthentication) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus1c5EnumUndergoingAuthentication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus1c5EnumUndergoingAuthentication(val *Status1c5EnumUndergoingAuthentication) *NullableStatus1c5EnumUndergoingAuthentication {
	return &NullableStatus1c5EnumUndergoingAuthentication{value: val, isSet: true}
}

func (v NullableStatus1c5EnumUndergoingAuthentication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus1c5EnumUndergoingAuthentication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

