/*
Nordigen Account Information Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0 (v2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nordigen

import (
	"encoding/json"
)

// PremiumAccountQuery Filter country.
type PremiumAccountQuery struct {
	DateFrom *string `json:"date_from,omitempty"`
	DateTo *string `json:"date_to,omitempty"`
	Country *CountryEnum `json:"country,omitempty"`
}

// NewPremiumAccountQuery instantiates a new PremiumAccountQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPremiumAccountQuery() *PremiumAccountQuery {
	this := PremiumAccountQuery{}
	return &this
}

// NewPremiumAccountQueryWithDefaults instantiates a new PremiumAccountQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPremiumAccountQueryWithDefaults() *PremiumAccountQuery {
	this := PremiumAccountQuery{}
	return &this
}

// GetDateFrom returns the DateFrom field value if set, zero value otherwise.
func (o *PremiumAccountQuery) GetDateFrom() string {
	if o == nil || o.DateFrom == nil {
		var ret string
		return ret
	}
	return *o.DateFrom
}

// GetDateFromOk returns a tuple with the DateFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PremiumAccountQuery) GetDateFromOk() (*string, bool) {
	if o == nil || o.DateFrom == nil {
		return nil, false
	}
	return o.DateFrom, true
}

// HasDateFrom returns a boolean if a field has been set.
func (o *PremiumAccountQuery) HasDateFrom() bool {
	if o != nil && o.DateFrom != nil {
		return true
	}

	return false
}

// SetDateFrom gets a reference to the given string and assigns it to the DateFrom field.
func (o *PremiumAccountQuery) SetDateFrom(v string) {
	o.DateFrom = &v
}

// GetDateTo returns the DateTo field value if set, zero value otherwise.
func (o *PremiumAccountQuery) GetDateTo() string {
	if o == nil || o.DateTo == nil {
		var ret string
		return ret
	}
	return *o.DateTo
}

// GetDateToOk returns a tuple with the DateTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PremiumAccountQuery) GetDateToOk() (*string, bool) {
	if o == nil || o.DateTo == nil {
		return nil, false
	}
	return o.DateTo, true
}

// HasDateTo returns a boolean if a field has been set.
func (o *PremiumAccountQuery) HasDateTo() bool {
	if o != nil && o.DateTo != nil {
		return true
	}

	return false
}

// SetDateTo gets a reference to the given string and assigns it to the DateTo field.
func (o *PremiumAccountQuery) SetDateTo(v string) {
	o.DateTo = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *PremiumAccountQuery) GetCountry() CountryEnum {
	if o == nil || o.Country == nil {
		var ret CountryEnum
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PremiumAccountQuery) GetCountryOk() (*CountryEnum, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *PremiumAccountQuery) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given CountryEnum and assigns it to the Country field.
func (o *PremiumAccountQuery) SetCountry(v CountryEnum) {
	o.Country = &v
}

func (o PremiumAccountQuery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DateFrom != nil {
		toSerialize["date_from"] = o.DateFrom
	}
	if o.DateTo != nil {
		toSerialize["date_to"] = o.DateTo
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	return json.Marshal(toSerialize)
}

type NullablePremiumAccountQuery struct {
	value *PremiumAccountQuery
	isSet bool
}

func (v NullablePremiumAccountQuery) Get() *PremiumAccountQuery {
	return v.value
}

func (v *NullablePremiumAccountQuery) Set(val *PremiumAccountQuery) {
	v.value = val
	v.isSet = true
}

func (v NullablePremiumAccountQuery) IsSet() bool {
	return v.isSet
}

func (v *NullablePremiumAccountQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePremiumAccountQuery(val *PremiumAccountQuery) *NullablePremiumAccountQuery {
	return &NullablePremiumAccountQuery{value: val, isSet: true}
}

func (v NullablePremiumAccountQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePremiumAccountQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


