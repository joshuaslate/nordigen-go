/*
Nordigen Account Information Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0 (v2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nordigen

import (
	"encoding/json"
	"fmt"
)

// CashAccountType ExternalCashAccountType1Code from ISO 20022
type CashAccountType string

// List of CashAccountType
const (
	CASHACCOUNTTYPE_CACC CashAccountType = "CACC"
	CASHACCOUNTTYPE_CARD CashAccountType = "CARD"
	CASHACCOUNTTYPE_CASH CashAccountType = "CASH"
	CASHACCOUNTTYPE_CHAR CashAccountType = "CHAR"
	CASHACCOUNTTYPE_CISH CashAccountType = "CISH"
	CASHACCOUNTTYPE_COMM CashAccountType = "COMM"
	CASHACCOUNTTYPE_CPAC CashAccountType = "CPAC"
	CASHACCOUNTTYPE_LLSV CashAccountType = "LLSV"
	CASHACCOUNTTYPE_LOAN CashAccountType = "LOAN"
	CASHACCOUNTTYPE_MGLD CashAccountType = "MGLD"
	CASHACCOUNTTYPE_MOMA CashAccountType = "MOMA"
	CASHACCOUNTTYPE_NREX CashAccountType = "NREX"
	CASHACCOUNTTYPE_ODFT CashAccountType = "ODFT"
	CASHACCOUNTTYPE_ONDP CashAccountType = "ONDP"
	CASHACCOUNTTYPE_OTHR CashAccountType = "OTHR"
	CASHACCOUNTTYPE_SACC CashAccountType = "SACC"
	CASHACCOUNTTYPE_SLRY CashAccountType = "SLRY"
	CASHACCOUNTTYPE_SVGS CashAccountType = "SVGS"
	CASHACCOUNTTYPE_TAXE CashAccountType = "TAXE"
	CASHACCOUNTTYPE_TRAN CashAccountType = "TRAN"
	CASHACCOUNTTYPE_SABS CashAccountType = "SABS"
	CASHACCOUNTTYPE_TRAS CashAccountType = "TRAS"
)

// All allowed values of CashAccountType enum
var AllowedCashAccountTypeEnumValues = []CashAccountType{
	"CACC",
	"CARD",
	"CASH",
	"CHAR",
	"CISH",
	"COMM",
	"CPAC",
	"LLSV",
	"LOAN",
	"MGLD",
	"MOMA",
	"NREX",
	"ODFT",
	"ONDP",
	"OTHR",
	"SACC",
	"SLRY",
	"SVGS",
	"TAXE",
	"TRAN",
	"SABS",
	"TRAS",
}

func (v *CashAccountType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CashAccountType(value)
	for _, existing := range AllowedCashAccountTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CashAccountType", value)
}

// NewCashAccountTypeFromValue returns a pointer to a valid CashAccountType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCashAccountTypeFromValue(v string) (*CashAccountType, error) {
	ev := CashAccountType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CashAccountType: valid values are %v", v, AllowedCashAccountTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CashAccountType) IsValid() bool {
	for _, existing := range AllowedCashAccountTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CashAccountType value
func (v CashAccountType) Ptr() *CashAccountType {
	return &v
}

type NullableCashAccountType struct {
	value *CashAccountType
	isSet bool
}

func (v NullableCashAccountType) Get() *CashAccountType {
	return v.value
}

func (v *NullableCashAccountType) Set(val *CashAccountType) {
	v.value = val
	v.isSet = true
}

func (v NullableCashAccountType) IsSet() bool {
	return v.isSet
}

func (v *NullableCashAccountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashAccountType(val *CashAccountType) *NullableCashAccountType {
	return &NullableCashAccountType{value: val, isSet: true}
}

func (v NullableCashAccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashAccountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

