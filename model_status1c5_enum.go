/*
Nordigen Account Information Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0 (v2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nordigen

import (
	"encoding/json"
	"fmt"
)

// Status1c5Enum Status of requisition
type Status1c5Enum string

// List of Status1c5Enum
const (
	STATUS1C5ENUM_CREATED Status1c5Enum = "CREATED"
	STATUS1C5ENUM_CR Status1c5Enum = "CR"
	STATUS1C5ENUM_LINKED Status1c5Enum = "LINKED"
	STATUS1C5ENUM_LN Status1c5Enum = "LN"
	STATUS1C5ENUM_EXPIRED Status1c5Enum = "EXPIRED"
	STATUS1C5ENUM_EX Status1c5Enum = "EX"
	STATUS1C5ENUM_REJECTED Status1c5Enum = "REJECTED"
	STATUS1C5ENUM_RJ Status1c5Enum = "RJ"
	STATUS1C5ENUM_UNDERGOING_AUTHENTICATION Status1c5Enum = "UNDERGOING_AUTHENTICATION"
	STATUS1C5ENUM_UA Status1c5Enum = "UA"
	STATUS1C5ENUM_GRANTING_ACCESS Status1c5Enum = "GRANTING_ACCESS"
	STATUS1C5ENUM_GA Status1c5Enum = "GA"
	STATUS1C5ENUM_SELECTING_ACCOUNTS Status1c5Enum = "SELECTING_ACCOUNTS"
	STATUS1C5ENUM_SA Status1c5Enum = "SA"
	STATUS1C5ENUM_GIVING_CONSENT Status1c5Enum = "GIVING_CONSENT"
	STATUS1C5ENUM_GC Status1c5Enum = "GC"
)

// All allowed values of Status1c5Enum enum
var AllowedStatus1c5EnumEnumValues = []Status1c5Enum{
	"CREATED",
	"CR",
	"LINKED",
	"LN",
	"EXPIRED",
	"EX",
	"REJECTED",
	"RJ",
	"UNDERGOING_AUTHENTICATION",
	"UA",
	"GRANTING_ACCESS",
	"GA",
	"SELECTING_ACCOUNTS",
	"SA",
	"GIVING_CONSENT",
	"GC",
}

func (v *Status1c5Enum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Status1c5Enum(value)
	for _, existing := range AllowedStatus1c5EnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Status1c5Enum", value)
}

// NewStatus1c5EnumFromValue returns a pointer to a valid Status1c5Enum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatus1c5EnumFromValue(v string) (*Status1c5Enum, error) {
	ev := Status1c5Enum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Status1c5Enum: valid values are %v", v, AllowedStatus1c5EnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Status1c5Enum) IsValid() bool {
	for _, existing := range AllowedStatus1c5EnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Status1c5Enum value
func (v Status1c5Enum) Ptr() *Status1c5Enum {
	return &v
}

type NullableStatus1c5Enum struct {
	value *Status1c5Enum
	isSet bool
}

func (v NullableStatus1c5Enum) Get() *Status1c5Enum {
	return v.value
}

func (v *NullableStatus1c5Enum) Set(val *Status1c5Enum) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus1c5Enum) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus1c5Enum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus1c5Enum(val *Status1c5Enum) *NullableStatus1c5Enum {
	return &NullableStatus1c5Enum{value: val, isSet: true}
}

func (v NullableStatus1c5Enum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus1c5Enum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

