/*
Nordigen Account Information Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0 (v2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nordigen

import (
	"encoding/json"
	"fmt"
)

// AccountV2StatusEnum - Status of account
type AccountV2StatusEnum struct {
	AccountV2StatusEnumDiscovered *AccountV2StatusEnumDiscovered
	AccountV2StatusEnumError *AccountV2StatusEnumError
	AccountV2StatusEnumExpired *AccountV2StatusEnumExpired
	AccountV2StatusEnumProcessing *AccountV2StatusEnumProcessing
	AccountV2StatusEnumReady *AccountV2StatusEnumReady
	AccountV2StatusEnumSuspended *AccountV2StatusEnumSuspended
}

// AccountV2StatusEnumDiscoveredAsAccountV2StatusEnum is a convenience function that returns AccountV2StatusEnumDiscovered wrapped in AccountV2StatusEnum
func AccountV2StatusEnumDiscoveredAsAccountV2StatusEnum(v *AccountV2StatusEnumDiscovered) AccountV2StatusEnum {
	return AccountV2StatusEnum{
		AccountV2StatusEnumDiscovered: v,
	}
}

// AccountV2StatusEnumErrorAsAccountV2StatusEnum is a convenience function that returns AccountV2StatusEnumError wrapped in AccountV2StatusEnum
func AccountV2StatusEnumErrorAsAccountV2StatusEnum(v *AccountV2StatusEnumError) AccountV2StatusEnum {
	return AccountV2StatusEnum{
		AccountV2StatusEnumError: v,
	}
}

// AccountV2StatusEnumExpiredAsAccountV2StatusEnum is a convenience function that returns AccountV2StatusEnumExpired wrapped in AccountV2StatusEnum
func AccountV2StatusEnumExpiredAsAccountV2StatusEnum(v *AccountV2StatusEnumExpired) AccountV2StatusEnum {
	return AccountV2StatusEnum{
		AccountV2StatusEnumExpired: v,
	}
}

// AccountV2StatusEnumProcessingAsAccountV2StatusEnum is a convenience function that returns AccountV2StatusEnumProcessing wrapped in AccountV2StatusEnum
func AccountV2StatusEnumProcessingAsAccountV2StatusEnum(v *AccountV2StatusEnumProcessing) AccountV2StatusEnum {
	return AccountV2StatusEnum{
		AccountV2StatusEnumProcessing: v,
	}
}

// AccountV2StatusEnumReadyAsAccountV2StatusEnum is a convenience function that returns AccountV2StatusEnumReady wrapped in AccountV2StatusEnum
func AccountV2StatusEnumReadyAsAccountV2StatusEnum(v *AccountV2StatusEnumReady) AccountV2StatusEnum {
	return AccountV2StatusEnum{
		AccountV2StatusEnumReady: v,
	}
}

// AccountV2StatusEnumSuspendedAsAccountV2StatusEnum is a convenience function that returns AccountV2StatusEnumSuspended wrapped in AccountV2StatusEnum
func AccountV2StatusEnumSuspendedAsAccountV2StatusEnum(v *AccountV2StatusEnumSuspended) AccountV2StatusEnum {
	return AccountV2StatusEnum{
		AccountV2StatusEnumSuspended: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AccountV2StatusEnum) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into AccountV2StatusEnumDiscovered
	err = newStrictDecoder(data).Decode(&dst.AccountV2StatusEnumDiscovered)
	if err == nil {
		jsonAccountV2StatusEnumDiscovered, _ := json.Marshal(dst.AccountV2StatusEnumDiscovered)
		if string(jsonAccountV2StatusEnumDiscovered) == "{}" { // empty struct
			dst.AccountV2StatusEnumDiscovered = nil
		} else {
			match++
		}
	} else {
		dst.AccountV2StatusEnumDiscovered = nil
	}

	// try to unmarshal data into AccountV2StatusEnumError
	err = newStrictDecoder(data).Decode(&dst.AccountV2StatusEnumError)
	if err == nil {
		jsonAccountV2StatusEnumError, _ := json.Marshal(dst.AccountV2StatusEnumError)
		if string(jsonAccountV2StatusEnumError) == "{}" { // empty struct
			dst.AccountV2StatusEnumError = nil
		} else {
			match++
		}
	} else {
		dst.AccountV2StatusEnumError = nil
	}

	// try to unmarshal data into AccountV2StatusEnumExpired
	err = newStrictDecoder(data).Decode(&dst.AccountV2StatusEnumExpired)
	if err == nil {
		jsonAccountV2StatusEnumExpired, _ := json.Marshal(dst.AccountV2StatusEnumExpired)
		if string(jsonAccountV2StatusEnumExpired) == "{}" { // empty struct
			dst.AccountV2StatusEnumExpired = nil
		} else {
			match++
		}
	} else {
		dst.AccountV2StatusEnumExpired = nil
	}

	// try to unmarshal data into AccountV2StatusEnumProcessing
	err = newStrictDecoder(data).Decode(&dst.AccountV2StatusEnumProcessing)
	if err == nil {
		jsonAccountV2StatusEnumProcessing, _ := json.Marshal(dst.AccountV2StatusEnumProcessing)
		if string(jsonAccountV2StatusEnumProcessing) == "{}" { // empty struct
			dst.AccountV2StatusEnumProcessing = nil
		} else {
			match++
		}
	} else {
		dst.AccountV2StatusEnumProcessing = nil
	}

	// try to unmarshal data into AccountV2StatusEnumReady
	err = newStrictDecoder(data).Decode(&dst.AccountV2StatusEnumReady)
	if err == nil {
		jsonAccountV2StatusEnumReady, _ := json.Marshal(dst.AccountV2StatusEnumReady)
		if string(jsonAccountV2StatusEnumReady) == "{}" { // empty struct
			dst.AccountV2StatusEnumReady = nil
		} else {
			match++
		}
	} else {
		dst.AccountV2StatusEnumReady = nil
	}

	// try to unmarshal data into AccountV2StatusEnumSuspended
	err = newStrictDecoder(data).Decode(&dst.AccountV2StatusEnumSuspended)
	if err == nil {
		jsonAccountV2StatusEnumSuspended, _ := json.Marshal(dst.AccountV2StatusEnumSuspended)
		if string(jsonAccountV2StatusEnumSuspended) == "{}" { // empty struct
			dst.AccountV2StatusEnumSuspended = nil
		} else {
			match++
		}
	} else {
		dst.AccountV2StatusEnumSuspended = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AccountV2StatusEnumDiscovered = nil
		dst.AccountV2StatusEnumError = nil
		dst.AccountV2StatusEnumExpired = nil
		dst.AccountV2StatusEnumProcessing = nil
		dst.AccountV2StatusEnumReady = nil
		dst.AccountV2StatusEnumSuspended = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(AccountV2StatusEnum)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(AccountV2StatusEnum)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AccountV2StatusEnum) MarshalJSON() ([]byte, error) {
	if src.AccountV2StatusEnumDiscovered != nil {
		return json.Marshal(&src.AccountV2StatusEnumDiscovered)
	}

	if src.AccountV2StatusEnumError != nil {
		return json.Marshal(&src.AccountV2StatusEnumError)
	}

	if src.AccountV2StatusEnumExpired != nil {
		return json.Marshal(&src.AccountV2StatusEnumExpired)
	}

	if src.AccountV2StatusEnumProcessing != nil {
		return json.Marshal(&src.AccountV2StatusEnumProcessing)
	}

	if src.AccountV2StatusEnumReady != nil {
		return json.Marshal(&src.AccountV2StatusEnumReady)
	}

	if src.AccountV2StatusEnumSuspended != nil {
		return json.Marshal(&src.AccountV2StatusEnumSuspended)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AccountV2StatusEnum) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AccountV2StatusEnumDiscovered != nil {
		return obj.AccountV2StatusEnumDiscovered
	}

	if obj.AccountV2StatusEnumError != nil {
		return obj.AccountV2StatusEnumError
	}

	if obj.AccountV2StatusEnumExpired != nil {
		return obj.AccountV2StatusEnumExpired
	}

	if obj.AccountV2StatusEnumProcessing != nil {
		return obj.AccountV2StatusEnumProcessing
	}

	if obj.AccountV2StatusEnumReady != nil {
		return obj.AccountV2StatusEnumReady
	}

	if obj.AccountV2StatusEnumSuspended != nil {
		return obj.AccountV2StatusEnumSuspended
	}

	// all schemas are nil
	return nil
}

type NullableAccountV2StatusEnum struct {
	value *AccountV2StatusEnum
	isSet bool
}

func (v NullableAccountV2StatusEnum) Get() *AccountV2StatusEnum {
	return v.value
}

func (v *NullableAccountV2StatusEnum) Set(val *AccountV2StatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountV2StatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountV2StatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountV2StatusEnum(val *AccountV2StatusEnum) *NullableAccountV2StatusEnum {
	return &NullableAccountV2StatusEnum{value: val, isSet: true}
}

func (v NullableAccountV2StatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountV2StatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


