/*
Nordigen Account Information Services API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0 (v2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nordigen

import (
	"encoding/json"
	"time"
)

// EndUserAgreement EndUserAgreement.
type EndUserAgreement struct {
	// The ID of this End User Agreement, used to refer to this end user agreement in other API calls.
	Id *string `json:"id,omitempty"`
	// The date & time at which the end user agreement was created.
	Created *time.Time `json:"created,omitempty"`
	// Maximum number of days of transaction data to retrieve.
	MaxHistoricalDays *int32 `json:"max_historical_days,omitempty"`
	// Number of days from acceptance that the access can be used.
	AccessValidForDays *int32 `json:"access_valid_for_days,omitempty"`
	// Array containing one or several values of ['balances', 'details', 'transactions']
	AccessScope []string `json:"access_scope,omitempty"`
	// The date & time at which the end user accepted the agreement.
	Accepted NullableTime `json:"accepted,omitempty"`
	// an Institution ID for this EUA
	InstitutionId string `json:"institution_id"`
}

// NewEndUserAgreement instantiates a new EndUserAgreement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndUserAgreement(institutionId string) *EndUserAgreement {
	this := EndUserAgreement{}
	var maxHistoricalDays int32 = 90
	this.MaxHistoricalDays = &maxHistoricalDays
	var accessValidForDays int32 = 90
	this.AccessValidForDays = &accessValidForDays
	this.InstitutionId = institutionId
	return &this
}

// NewEndUserAgreementWithDefaults instantiates a new EndUserAgreement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndUserAgreementWithDefaults() *EndUserAgreement {
	this := EndUserAgreement{}
	var maxHistoricalDays int32 = 90
	this.MaxHistoricalDays = &maxHistoricalDays
	var accessValidForDays int32 = 90
	this.AccessValidForDays = &accessValidForDays
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EndUserAgreement) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndUserAgreement) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EndUserAgreement) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EndUserAgreement) SetId(v string) {
	o.Id = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *EndUserAgreement) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndUserAgreement) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *EndUserAgreement) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *EndUserAgreement) SetCreated(v time.Time) {
	o.Created = &v
}

// GetMaxHistoricalDays returns the MaxHistoricalDays field value if set, zero value otherwise.
func (o *EndUserAgreement) GetMaxHistoricalDays() int32 {
	if o == nil || o.MaxHistoricalDays == nil {
		var ret int32
		return ret
	}
	return *o.MaxHistoricalDays
}

// GetMaxHistoricalDaysOk returns a tuple with the MaxHistoricalDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndUserAgreement) GetMaxHistoricalDaysOk() (*int32, bool) {
	if o == nil || o.MaxHistoricalDays == nil {
		return nil, false
	}
	return o.MaxHistoricalDays, true
}

// HasMaxHistoricalDays returns a boolean if a field has been set.
func (o *EndUserAgreement) HasMaxHistoricalDays() bool {
	if o != nil && o.MaxHistoricalDays != nil {
		return true
	}

	return false
}

// SetMaxHistoricalDays gets a reference to the given int32 and assigns it to the MaxHistoricalDays field.
func (o *EndUserAgreement) SetMaxHistoricalDays(v int32) {
	o.MaxHistoricalDays = &v
}

// GetAccessValidForDays returns the AccessValidForDays field value if set, zero value otherwise.
func (o *EndUserAgreement) GetAccessValidForDays() int32 {
	if o == nil || o.AccessValidForDays == nil {
		var ret int32
		return ret
	}
	return *o.AccessValidForDays
}

// GetAccessValidForDaysOk returns a tuple with the AccessValidForDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndUserAgreement) GetAccessValidForDaysOk() (*int32, bool) {
	if o == nil || o.AccessValidForDays == nil {
		return nil, false
	}
	return o.AccessValidForDays, true
}

// HasAccessValidForDays returns a boolean if a field has been set.
func (o *EndUserAgreement) HasAccessValidForDays() bool {
	if o != nil && o.AccessValidForDays != nil {
		return true
	}

	return false
}

// SetAccessValidForDays gets a reference to the given int32 and assigns it to the AccessValidForDays field.
func (o *EndUserAgreement) SetAccessValidForDays(v int32) {
	o.AccessValidForDays = &v
}

// GetAccessScope returns the AccessScope field value if set, zero value otherwise.
func (o *EndUserAgreement) GetAccessScope() []string {
	if o == nil || o.AccessScope == nil {
		var ret []string
		return ret
	}
	return o.AccessScope
}

// GetAccessScopeOk returns a tuple with the AccessScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndUserAgreement) GetAccessScopeOk() ([]string, bool) {
	if o == nil || o.AccessScope == nil {
		return nil, false
	}
	return o.AccessScope, true
}

// HasAccessScope returns a boolean if a field has been set.
func (o *EndUserAgreement) HasAccessScope() bool {
	if o != nil && o.AccessScope != nil {
		return true
	}

	return false
}

// SetAccessScope gets a reference to the given []string and assigns it to the AccessScope field.
func (o *EndUserAgreement) SetAccessScope(v []string) {
	o.AccessScope = v
}

// GetAccepted returns the Accepted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EndUserAgreement) GetAccepted() time.Time {
	if o == nil || o.Accepted.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Accepted.Get()
}

// GetAcceptedOk returns a tuple with the Accepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EndUserAgreement) GetAcceptedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Accepted.Get(), o.Accepted.IsSet()
}

// HasAccepted returns a boolean if a field has been set.
func (o *EndUserAgreement) HasAccepted() bool {
	if o != nil && o.Accepted.IsSet() {
		return true
	}

	return false
}

// SetAccepted gets a reference to the given NullableTime and assigns it to the Accepted field.
func (o *EndUserAgreement) SetAccepted(v time.Time) {
	o.Accepted.Set(&v)
}
// SetAcceptedNil sets the value for Accepted to be an explicit nil
func (o *EndUserAgreement) SetAcceptedNil() {
	o.Accepted.Set(nil)
}

// UnsetAccepted ensures that no value is present for Accepted, not even an explicit nil
func (o *EndUserAgreement) UnsetAccepted() {
	o.Accepted.Unset()
}

// GetInstitutionId returns the InstitutionId field value
func (o *EndUserAgreement) GetInstitutionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstitutionId
}

// GetInstitutionIdOk returns a tuple with the InstitutionId field value
// and a boolean to check if the value has been set.
func (o *EndUserAgreement) GetInstitutionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InstitutionId, true
}

// SetInstitutionId sets field value
func (o *EndUserAgreement) SetInstitutionId(v string) {
	o.InstitutionId = v
}

func (o EndUserAgreement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.MaxHistoricalDays != nil {
		toSerialize["max_historical_days"] = o.MaxHistoricalDays
	}
	if o.AccessValidForDays != nil {
		toSerialize["access_valid_for_days"] = o.AccessValidForDays
	}
	if o.AccessScope != nil {
		toSerialize["access_scope"] = o.AccessScope
	}
	if o.Accepted.IsSet() {
		toSerialize["accepted"] = o.Accepted.Get()
	}
	if true {
		toSerialize["institution_id"] = o.InstitutionId
	}
	return json.Marshal(toSerialize)
}

type NullableEndUserAgreement struct {
	value *EndUserAgreement
	isSet bool
}

func (v NullableEndUserAgreement) Get() *EndUserAgreement {
	return v.value
}

func (v *NullableEndUserAgreement) Set(val *EndUserAgreement) {
	v.value = val
	v.isSet = true
}

func (v NullableEndUserAgreement) IsSet() bool {
	return v.isSet
}

func (v *NullableEndUserAgreement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndUserAgreement(val *EndUserAgreement) *NullableEndUserAgreement {
	return &NullableEndUserAgreement{value: val, isSet: true}
}

func (v NullableEndUserAgreement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndUserAgreement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


